from news.models import *

Создать двух пользователей
>>> u1 = User.objects.create_user(username='Ivan')
>>> u2 = User.objects.create_user(username='Alex')

Создать два объекта модели Author, связанные с пользователями.
>>> Author.objects.create(authorUser=u1)
<Author: Ivan>
>>> Author.objects.create(authorUser=u2)
<Author: Alex>

Добавить 4 категории в модель Category.
>>> Category.objects.create(name='Games')
<Category: Category object (1)>
>>> Category.objects.create(name='InternationalNews')
<Category: Category object (2)>
>>> Category.objects.create(name='HighTech')
<Category: Category object (3)>
>>> Category.objects.create(name='Python')
<Category: Category object (4)>

Добавить 2 статьи и 1 новость.
>>> author = Author.objects.get(id=1)
>>> Post.objects.create(author=author, categoryType='AR', title='Раньше игры были лучше', text='Игры стали более массовым развлечением и потому упростились.')
<Post: Post object (1)>
>>> Post.objects.create(author=author, categoryType='NW', title='Время уходит', text='Человечество тратит драгоценные ресурсы в пустую, вместо использования их в развитии технологий и поиска будущего для следующих поколений')
<Post: Post object (2)>
>>> author = Author.objects.get(id=2)
>>> Post.objects.create(author=author, categoryType='AR', title='Вирусам-нет', text='Президент Индонезии Джоко Видодо объявил об отмене всех ограничений общественной деятельности, введенных в стране ранее из-за пандемии COVID-19')
<Post: Post object (3)>

Присвоить им категории
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))

Создать как минимум 4 комментария к разным объектам модели Post
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text="Новые игры скучные")
<Comment: Comment object (1)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text="Всегда кажется будто бы раньше было лучше")
<Comment: Comment object (2)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text="Никто не думает о будущем")
<Comment: Comment object (3)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text="Никто не знает, что будет завтра")
<Comment: Comment object (4)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text="Надоел уже этот Ковид")
<Comment: Comment object (5)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text="Скоро придумают новый вирус")
<Comment: Comment object (6)>


Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=2).like()
>>> Post.objects.get(id=2).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()

>>> Post.objects.get(id=1).rating
1
>>> Post.objects.get(id=2).rating
2
>>> Post.objects.get(id=3).rating
-1

>>> Post.objects.get(id=3).dislike()
>>> Post.objects.get(id=3).dislike()
>>> Post.objects.get(id=3).dislike()
>>> Comment.objects.get(id=4).like()
>>> Comment.objects.get(id=5).dislike()
>>> Comment.objects.get(id=6).dislike()

>>> Comment.objects.get(id=1).rating
1
>>> Comment.objects.get(id=2).rating
1
>>> Comment.objects.get(id=3).rating
-1
>>> Comment.objects.get(id=4).rating
1
>>> Comment.objects.get(id=5).rating
-1
>>> Comment.objects.get(id=6).rating
-1

Обновить рейтинги пользователей.
>>> a = Author.objects.get(id=1)
>>> a.update_rating()
>>> a.ratingAuthor
8
>>> a2 = Author.objects.get(id=2)
>>> a2.update_rating()
>>> a2.ratingAuthor
-2

Вывести username и рейтинг лучшего пользователя
>>> a =Author.objects.order_by('-ratingAuthor')[:1]
>>> for i in a:
...     i.ratingAuthor
...     i.authorUser.username
... 
8
'Ivan'

Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> a= Post.objects.filter(categoryType=Post.ARTICLE).order_by('-rating')[0]
>>> a.dateCreation
datetime.datetime(2023, 1, 25, 18, 23, 14, 61707, tzinfo=datetime.timezone.utc)
>>> a.author.authorUser.username
'Ivan'
>>> a.rating
1
>>> a.title
'Раньше игры были лучше'
>>> a.preview()
'Игры стали более массовым развлечением и потому упростились....'

Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
a.id
1
>>> Comment.objects.filter(commentPost=1).order_by().values('dateCreation', 'commentUser__username', 'rating', 'text')
<QuerySet [{'dateCreation': datetime.datetime(2023, 1, 25, 18, 38, 59, 375962, tzinfo=datetime.timezone.utc), 'commentUser__username': 'Ivan', 'rating': 1, 'text': 'Новые игры скучные'}, {'dateCreation': datetime.datetime(2023, 1, 25, 18, 41, 53, 261230, tzinfo=datetime.timezone.utc), 'commentUser__username': 'Alex', 'rating': 1, 'text': 'Всегда кажется будто бы раньше было лучше'}]>


